{"ast":null,"code":"export const checkSession = () => {\n  return fetch('/api/session', {\n    method: 'GET'\n  }).catch(convertNetworkError).then(convertResponse);\n};\nexport const createSession = ({\n  username\n}) => {\n  return fetch('/api/session', {\n    method: 'POST',\n    headers: new Headers({\n      'content-type': 'application/json'\n    }),\n    body: JSON.stringify({\n      username\n    })\n  }).catch(convertNetworkError).then(convertResponse);\n};\nexport const endSession = () => {\n  return fetch('/api/session', {\n    method: 'DELETE'\n  }).catch(convertNetworkError).then(convertResponse);\n};\nexport const abilityToaddWhishlist = (id, media) => {\n  return fetch('/wishlist', {\n    method: 'POST',\n    headers: new Headers({\n      'content-type': 'application/json'\n    }),\n    body: JSON.stringify({\n      id,\n      media\n    })\n  }).catch(convertNetworkError).then(convertResponse);\n};\nexport const abilityToDeleteWishlist = (id, media) => {\n  return fetch(`/wishlist`, {\n    method: 'DELETE',\n    headers: new Headers({\n      'content-type': 'application/json'\n    }),\n    body: JSON.stringify({\n      id: id,\n      media: media\n    })\n  }).catch(convertNetworkError).then(convertResponse);\n};\nexport const abilityToGetWhishList = () => {\n  return fetch('/wishlist', {\n    method: 'GET'\n  }).catch(convertNetworkError).then(convertResponse);\n};\nexport const abilityToGetUsername = () => {\n  return fetch('/username', {\n    method: 'GET'\n  }).catch(convertNetworkError).then(convertResponse);\n};\n\nconst convertNetworkError = () => Promise.reject({\n  error: \"NETWORK_ERROR\"\n});\n\nconst convertResponse = response => {\n  if (response.ok) {\n    return response.json();\n  }\n\n  return response.json().then(err => Promise.reject(err));\n};","map":{"version":3,"sources":["/Users/akanksha/Documents/WebDevelopment/student-singhakan2635/project/netweb/src/js/services.js"],"names":["checkSession","fetch","method","catch","convertNetworkError","then","convertResponse","createSession","username","headers","Headers","body","JSON","stringify","endSession","abilityToaddWhishlist","id","media","abilityToDeleteWishlist","abilityToGetWhishList","abilityToGetUsername","Promise","reject","error","response","ok","json","err"],"mappings":"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","sourcesContent":["export const checkSession = () => {\n  return fetch('/api/session',  {\n    method: 'GET',\n  })\n  .catch(convertNetworkError )\n  .then (convertResponse);\n};\n\nexport const createSession = ({username}) => {\n  return fetch('/api/session',  {\n    method: 'POST',\n    headers: new Headers({\n      'content-type': 'application/json',\n    }),\n    body: JSON.stringify({ username }),\n  })\n  .catch(convertNetworkError )\n  .then (convertResponse);\n};\n\nexport const endSession = () => {\n  return fetch('/api/session',  {\n    method: 'DELETE',\n  })\n  .catch(convertNetworkError )\n  .then (convertResponse);\n};\n\nexport const abilityToaddWhishlist = (id, media) => \n{\n\n  return fetch('/wishlist',  {\n    method: 'POST',\n    headers: new Headers({\n      'content-type': 'application/json',\n    }),\n    body: JSON.stringify({ id, media }),\n  })\n  .catch(convertNetworkError )\n  .then (convertResponse);\n\n};\n\nexport const abilityToDeleteWishlist = (id,media) =>\n{\n  return fetch(`/wishlist`, {\n    method: 'DELETE',\n    headers:new Headers({\n      'content-type': 'application/json',\n    }),\n    body: JSON.stringify({id:id, media:media}),\n  })\n  .catch(convertNetworkError )\n  .then (convertResponse);\n}\n\nexport const abilityToGetWhishList = () => \n{\n\n  return fetch('/wishlist', {\n    method: 'GET'\n  })\n  .catch(convertNetworkError )\n  .then (convertResponse);\n};\n\n\n\nexport const abilityToGetUsername = () =>\n{\n  return fetch('/username', {\n    method:'GET',\n  })\n  .catch(convertNetworkError)\n  .then (convertResponse);\n}\n\nconst convertNetworkError = () => Promise.reject({ error: \"NETWORK_ERROR\" });\n  \nconst convertResponse = (response) => {\n\n    if (response.ok) \n    {\n      return response.json();\n    }\n    return response.json().then((err) => Promise.reject(err));\n};\n  \n\n\n"]},"metadata":{},"sourceType":"module"}